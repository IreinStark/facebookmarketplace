rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for cleaner code
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // USER PROFILES COLLECTION RULES
    match /userProfiles/{userId} {
      // Anyone can read any user's basic public profile (e.g., for seller info)
      allow read: if true;
      
      // A user can only create their own user document (when they sign up)
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'displayName']);
      
      // A user can update their own profile
      allow update: if isOwner(userId);
      
      // Users cannot delete their own profiles directly
      allow delete: if false;
    }
    
    // PRODUCTS COLLECTION RULES (changed from listings to products)
    match /products/{productId} {
      // Anyone can read any product
      allow read: if true;
      
      // Only logged-in users can create a new product
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        // Validate required fields
        request.resource.data.keys().hasAll(['title', 'description', 'price', 'userId']) &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.title is string &&
        request.resource.data.description is string;
      
      // Only the owner can update their own product
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        // Prevent changing userId
        request.resource.data.userId == resource.data.userId;
      
      // Only the owner can delete their own product
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // PHOTOS COLLECTION RULES
    match /photos/{photoId} {
      // Anyone can read photos
      allow read: if true;
      
      // Only authenticated users can create photos
      allow create: if isAuthenticated() && 
        request.resource.data.uploadedBy == request.auth.uid;
      
      // Only the uploader can update their photos
      allow update: if isAuthenticated() && 
        resource.data.uploadedBy == request.auth.uid;
      
      // Only the uploader can delete their photos
      allow delete: if isAuthenticated() && 
        resource.data.uploadedBy == request.auth.uid;
    }
    
    // NOTIFICATIONS COLLECTION RULES
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Users can create notifications (typically done by system)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read, etc.)
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // CHATS COLLECTION (for buyer-seller communication)
    match /chats/{chatId} {
      // Only participants can read the chat
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Users can create chats if they're one of the participants
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2;
      
      // Participants can update chat metadata (like last message time)
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants &&
        // Prevent changing participants list
        request.resource.data.participants == resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only chat participants can read messages
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Users can create messages if they're a participant and the author
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.authorId == request.auth.uid &&
          request.resource.data.timestamp == request.time;
        
        // Messages cannot be updated or deleted (immutable)
        allow update, delete: if false;
      }
    }
    
    // TRANSACTIONS COLLECTION (for purchase records)
    match /transactions/{transactionId} {
      // Only buyer and seller can read transaction
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.sellerId);
      
      // Transactions are typically created by server-side functions
      // but if created client-side, ensure proper ownership
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.buyerId &&
        request.resource.data.timestamp == request.time;
      
      // Only allow status updates by participants (e.g., marking as completed)
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.sellerId) &&
        // Only allow changing status field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
        request.resource.data.updatedAt == request.time;
      
      allow delete: if false; // Transactions should not be deleted
    }
    
    // REVIEWS COLLECTION
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Only buyers can create reviews for purchases they made
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid &&
        // Verify the reviewer actually bought from this seller
        exists(/databases/$(database)/documents/transactions/$(request.resource.data.transactionId)) &&
        get(/databases/$(database)/documents/transactions/$(request.resource.data.transactionId)).data.buyerId == request.auth.uid &&
        request.resource.data.createdAt == request.time;
      
      // Reviewers can update their own reviews within a time limit
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid &&
        // Allow updates within 24 hours of creation
        request.time < resource.data.createdAt + duration.value(24, 'h') &&
        request.resource.data.updatedAt == request.time;
      
      // Reviews cannot be deleted (for trust and transparency)
      allow delete: if false;
    }
    
    // ADMIN COLLECTION (for app configuration, reports, etc.)
    match /admin/{document} {
      allow read, write: if isAdmin();
    }
    
    // Deny access to any other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}