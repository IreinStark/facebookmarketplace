rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for cleaner code
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Admin function removed as it's not currently used
    
    // USER PROFILES COLLECTION RULES
    match /userProfiles/{userId} {
      // Anyone can read any user's basic public profile (e.g., for seller info)
      allow read: if true;
      
      // A user can only create their own user document (when they sign up)
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'displayName']);
      
      // A user can update their own profile
      allow update: if isOwner(userId);
      
      // Users cannot delete their own profiles directly
      allow delete: if false;
    }
    
    // PRODUCTS COLLECTION RULES (changed from listings to products)
    match /products/{productId} {
      // Anyone can read any product
      allow read: if true;
      
      // Only logged-in users can create a new product
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        // Validate required fields
        request.resource.data.keys().hasAll(['title', 'description', 'price', 'userId']) &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.title is string &&
        request.resource.data.description is string;
      
      // Only the owner can update their own product
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        // Prevent changing userId
        request.resource.data.userId == resource.data.userId;
      
      // Only the owner can delete their own product
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // PHOTOS COLLECTION RULES
    match /photos/{photoId} {
      // Anyone can read photos
      allow read: if true;
      
      // Only authenticated users can create photos
      allow create: if isAuthenticated() && 
        request.resource.data.uploadedBy == request.auth.uid;
      
      // Only the uploader can update their photos
      allow update: if isAuthenticated() && 
        resource.data.uploadedBy == request.auth.uid;
      
      // Only the uploader can delete their photos
      allow delete: if isAuthenticated() && 
        resource.data.uploadedBy == request.auth.uid;
    }
    
    // NOTIFICATIONS COLLECTION RULES
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Users can create notifications (typically done by system)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read, etc.)
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // CONVERSATIONS COLLECTION (for buyer-seller communication)
    match /conversations/{conversationId} {
      // Only participants can read the conversation
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Users can create conversations if they're one of the participants
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2;
      
      // Participants can update conversation metadata (like last message time)
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants &&
        // Prevent changing participants list
        request.resource.data.participants == resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only conversation participants can read messages
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Users can create messages if they're a participant and the author
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        
        // Messages can be marked as read
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Messages cannot be deleted (immutable)
        allow delete: if false;
      }
    }
    
    // Allow any other collection access for development - REMOVE IN PRODUCTION
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}